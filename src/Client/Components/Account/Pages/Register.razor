@page "/Account/Register"
@using System.ComponentModel.DataAnnotations
@using Client.Model
@using Client.Services
@using Client.Components.Account.Shared

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message"/>
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator/>
            <h2>Create a new account.</h2>
            <hr/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    
    [SupplyParameterFromForm] private RegisterInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    [Inject] private IAuthenticationService _authService { get; set; }
    private string? Message = null;

    public async Task RegisterUser(EditContext editContext)
    {
        var result = await _authService.RegisterAsync(Input);
        if (!result.Success)
        {
            Message = result.Errors.ToString();
        }
    }
}